1.
A. Clone any public repository on GitHub using the 'git clone' command. 
B. Create a public repository with a 'README.md' file, and subsequently modify 
the 'README.md' file to articulate the purpose of the repository. Finally, 
commit those changes with an appropriate message. 
C. Globally configure your username and email on the local machine, utilize the 
'git config' command. 
D. Pull the 'README.md' file from the previously created public repository 
E. Edit the 'README.md' file and create an 'index.html' file, then add both files to 
the staging area. 
F. Push the changes made to the previously created files to the repository, and use 
the upstream flag to push changes to that repository.

a. git clone https://github.com/your_username/myrepo.git
b. git clone https://github.com/your_username/secRepo.git
   cd secRepo
   vi README.md
   git add README.md
   git commit -m "Updated README.md to describe the purpose of the repository"
c. git config --global user.name "your_username"
   git config --global user.email "your_email"
   git config --global --list
d. git pull origin main
e. vi README.md
   vi index.html
   git add README.md index.html
   git commit -m "Updated README.md and added index.html"
f. git push --set-upstream origin main


2.
Branching, Merging, and Diffs Workflow 
a) Refer to Figure 0.1 where: 
 C0 (commit): Indicates the addition of an h1 tag in 'README.md'. 
 C1 (commit): Creation of a new txt file. 
 C2 (commit): Modification in the txt file.  
Push the changes made above to the remote repository of the origin main 
branch. 
main 
Fig:0.1 
b) Refer to Figure 0.2 where: 
 iss53 (issue53): “iss53” is the name of a branch.

 C3 (commit): Denotes the creation of the “index.html” file and updating 
“readme.md” in the “iss53” branch. 
To discern the differences between commits C1 and C2, as well as to compare 
the “main” branch with “iss53”, utilize the “git diff' command”. Push the 
changes made on the 'iss53' branch to the remote repository. 
main 
Fig:0.2 
c) Refer to Figure 0.3 where: 
 hotfix: 'hotfix' is the name of a branch. 
 C4 (commit): Denotes the update of the 'new txt file' in the 'hotfix' 
branch. 
Additionally, push the changes made on the 'hotfix' branch to the remote 
repository.

d) Merge the 'hotfix' branch into the 'main' branch and delete the 'hotfix' branch, as 
shown in Figure 0.4.

e) Merge the 'iss53' branch into the 'main' branch and delete the 'iss53' branch. 

a)
i)  vi README.md
    git add README.md
    git commit -m "C0: Added <h1> tag in README.md"

ii) vi notes.txt
    git add notes.txt
    git commit -m "C1: Created notes.txt file"

iii) vi notes.txt
     git add notes.txt
     git commit -m "C2: Modified notes.txt file"

iv)  git push origin main

b)
i) git checkout -b iss53
ii)vi index.html
   vi README.md
   git add index.html README.md
   git commit -m "C3: Created index.html and Updated README.md"
iii)git log --oneline
    git diff <commit-id-C1> <commit-id-C2>
    git diff main iss53
    git push --set-upstream origin iss53

c)
i) git checkout main
   git checkout -b hotfix
ii)vi notes.txt
   git add notes.txt
   git commit -m "C4: Hotfix - updated notes.txt"
iii)git push --set-upstream origin hotfix

d)
i) git checkout main
ii)git merge hotfix
iii)git branch -d hotfix
   git push origin --delete hotfix

e)
i) git checkout main
ii)git merge iss53
iii)git branch -d iss53
    git push origin --delete iss53

